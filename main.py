import asyncio
import os
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.filters import CommandStart
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker, declarative_base
from sqlalchemy import Column, Integer, BigInteger, String, DateTime, select
import random

BOT_TOKEN = os.getenv("BOT_TOKEN") or "DEMO_TOKEN"

# --- DB Setup ---
Base = declarative_base()
engine = create_async_engine("sqlite+aiosqlite:///./db.sqlite3")
async_session = sessionmaker(engine, expire_on_commit=False, class_=AsyncSession)

class User(Base):
    __tablename__ = "users"
    id = Column(Integer, primary_key=True)
    tg_id = Column(BigInteger, unique=True)
    name = Column(String)
    balance = Column(Integer, default=0)
    last_bonus = Column(DateTime, default=datetime.utcnow)
    last_loan = Column(DateTime, default=datetime.utcnow)

class Bank(Base):
    __tablename__ = "bank"
    id = Column(Integer, primary_key=True)
    total = Column(Integer, default=100000)

# --- Bot Setup ---
dp = Dispatcher(storage=MemoryStorage())
bot = Bot(BOT_TOKEN, parse_mode=ParseMode.HTML)

# --- Utils ---
async def get_or_create_user(tg_id: int, name: str):
    async with async_session() as session:
        result = await session.execute(select(User).where(User.tg_id == tg_id))
        user = result.scalar_one_or_none()
        if user:
            return user, session
        user = User(tg_id=tg_id, name=name, balance=500)
        session.add(user)
        bank = await session.get(Bank, 1)
        if not bank:
            session.add(Bank(id=1, total=100000))
        await session.commit()
        return user, session

# --- Handlers ---

@dp.message(F.text.lower() == "—Å—Ç–∞—Ä—Ç")
async def cmd_start(message: Message):
    user, _ = await get_or_create_user(message.from_user.id, message.from_user.first_name)
    await message.answer("üéâ –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!" if user.balance == 500 else "‚úÖ –£–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")

@dp.message(F.text.lower() == "–ø—Ä–æ—Ñ–∏–ª—å")
async def profile(message: Message):
    user, _ = await get_or_create_user(message.from_user.id, message.from_user.first_name)
    await message.answer(f"üë§ <b>{user.name}</b>
üí∞ –ë–∞–ª–∞–Ω—Å: {user.balance} –º–æ–Ω–µ—Ç")

@dp.message(F.text.lower() == "–±–∞–Ω–∫")
async def bank_info(message: Message):
    async with async_session() as session:
        bank = await session.get(Bank, 1)
        await message.answer(f"üè¶ –ë–∞–Ω–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç: {bank.total} –º–æ–Ω–µ—Ç")

@dp.message(F.text.lower() == "–±–æ–Ω—É—Å")
async def bonus(message: Message):
    user, session = await get_or_create_user(message.from_user.id, message.from_user.first_name)
    now = datetime.utcnow()
    if now - user.last_bonus >= timedelta(hours=6):
        user.last_bonus = now
        user.balance += 200
        await session.commit()
        await message.answer("üéÅ –¢—ã –ø–æ–ª—É—á–∏–ª –±–æ–Ω—É—Å 200 –º–æ–Ω–µ—Ç!")
    else:
        left = timedelta(hours=6) - (now - user.last_bonus)
        await message.answer(f"‚åõ –ü—Ä–∏—Ö–æ–¥–∏ —á–µ—Ä–µ–∑ {int(left.total_seconds()//3600)} —á.")

@dp.message(F.text.lower() == "–∑–∞–π–º")
async def loan(message: Message):
    user, session = await get_or_create_user(message.from_user.id, message.from_user.first_name)
    bank = await session.get(Bank, 1)
    now = datetime.utcnow()
    if now - user.last_loan >= timedelta(hours=12):
        amount = 300
        if bank.total < amount:
            await message.answer("‚ùå –í –±–∞–Ω–∫–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
            return
        user.last_loan = now
        user.balance += amount
        bank.total -= amount
        await session.commit()
        await message.answer(f"üí∏ –¢—ã –ø–æ–ª—É—á–∏–ª –∑–∞–π–º {amount} –º–æ–Ω–µ—Ç.")
    else:
        left = timedelta(hours=12) - (now - user.last_loan)
        await message.answer(f"‚åõ –ó–∞–π–º –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ {int(left.total_seconds()//3600)} —á.")

@dp.message(F.text.lower() == "–º–æ–Ω–µ—Ç–∫–∞")
async def coin(message: Message):
    user, session = await get_or_create_user(message.from_user.id, message.from_user.first_name)
    if user.balance < 100:
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç (–Ω—É–∂–Ω–æ 100).")
        return
    user.balance -= 100
    result = random.choice(["–æ—Ä–µ–ª", "—Ä–µ—à–∫–∞"])
    if result == "–æ—Ä–µ–ª":
        user.balance += 200
        text = "üéâ –í—ã–ø–∞–ª <b>–æ—Ä–µ–ª</b>! –¢—ã –≤—ã–∏–≥—Ä–∞–ª 200 –º–æ–Ω–µ—Ç."
    else:
        text = "üí§ –í—ã–ø–∞–ª–∞ <b>—Ä–µ—à–∫–∞</b>. –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª."
    await session.commit()
    await message.answer(text)

@dp.message(F.text.lower() == "—Å–ª–æ—Ç")
async def slot(message: Message):
    user, session = await get_or_create_user(message.from_user.id, message.from_user.first_name)
    if user.balance < 100:
        await message.answer("‚ùå –ù—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã 100 –º–æ–Ω–µ—Ç.")
        return
    user.balance -= 100
    emojis = ["üçí", "üçã", "üçä", "üíé", "7Ô∏è‚É£"]
    roll = [random.choice(emojis) for _ in range(3)]
    if len(set(roll)) == 1:
        user.balance += 500
        result = "üéâ –î–∂–µ–∫–ø–æ—Ç! +500 –º–æ–Ω–µ—Ç"
    elif len(set(roll)) == 2:
        user.balance += 200
        result = "‚ú® –ü–æ—á—Ç–∏! +200 –º–æ–Ω–µ—Ç"
    else:
        result = "üí§ –ù–µ –ø–æ–≤–µ–∑–ª–æ."
    await session.commit()
    await message.answer("[" + " ".join(roll) + f"]
{result}")

@dp.message(F.text.lower() == "–¥–∞–π—Å")
async def dice(message: Message):
    user, session = await get_or_create_user(message.from_user.id, message.from_user.first_name)
    if user.balance < 50:
        await message.answer("‚ùå –ù—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã 50 –º–æ–Ω–µ—Ç.")
        return
    user.balance -= 50
    roll = random.randint(1, 6)
    if roll == 6:
        user.balance += 300
        result = "üé≤ –í—ã–ø–∞–ª–æ 6! –¢—ã –≤—ã–∏–≥—Ä–∞–ª 300 –º–æ–Ω–µ—Ç."
    else:
        result = f"üé≤ –í—ã–ø–∞–ª–æ {roll}. –ù–µ –ø–æ–≤–µ–∑–ª–æ."
    await session.commit()
    await message.answer(result)

@dp.message(F.text.lower() == "—Ç–æ–ø")
async def top(message: Message):
    async with async_session() as session:
        result = await session.execute(select(User).order_by(User.balance.desc()).limit(10))
        top_users = result.scalars().all()
        text = "üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:
"
        for i, user in enumerate(top_users, 1):
            text += f"{i}. {user.name} ‚Äî {user.balance} –º–æ–Ω–µ—Ç
"
        await message.answer(text)

# --- Main ---
async def main():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
